---
title: "Pandas basics 02"
author: "Jie Wang"
date: "2022-08-06"
categories: [pandas]
image: "pandas.png"
jupyter: python3
---

Practice based on [pandas official site](https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)

# create a `DataFrame`

## using a Python dictionary of lists

+ the dictionary keys will be used as "column headers"
+ the values in each list as "columns" of the `DataFrame`
```{python}
import pandas as pd

df = pd.DataFrame(
    {
        "Name": [
            "Tom",
            "Jim",
            "Rose"
        ],
        "Age": [22, 35, 28],
        "Sex": ["male", "male", "female"]
    }
)

df

```

## each column in a `DataFrame` is a `Series`

```{python}
# the selection of a single column is very similar to selection of dictionary
# values based on the key

type(df["Age"])

# create a Series from scratch
ages = pd.Series([27,23,25], name ="Age")
ages

```

## Do something with a DataFrame or Series

```{python}
print(df["Age"].max())

print(ages.max())
```
## Basic statistics

```{python}
df.describe() # provides a quick overview of the numerical data in DataFrame
```

# Intro to data structures
[User Guide](https://pandas.pydata.org/docs/user_guide/dsintro.html#dsintro)

## Series

basic syntax `s = pd.Series(data, index=index)`

Here `data` can be many different things:

+ a Python dict
+ an ndarray
+ a scalar value (like 5)

The `index` is a list of axis labels

The axis labels are collectively reffered to as the `index`

```{python}
import numpy as np

# from ndarray
s = pd.Series(np.random.randn(5), index = ["a","b","c","d","e"])
s

# from dist
d = {"x": 1, "y": 2, "z": 5}
pd.Series(d)

# if an index is passed, the values in data corresponding to the labels in the
# index will be pulled out
d1 = {"a": 0.0, "b": 2.0, "c": 4.0}
pd.Series(d1)
d2 = {"a": 0.0, "b": 2.0, "c": 4.0}
pd.Series(d2, index = ["b", "d", "a", "c"])

# from scalar value
pd.Series(5.8, index = ["a", "b", "d", "f"])

```

what is `ndarry`? which is shorthand for "N-dimensional array"

The NumPy `ndarray` class is used to represent both matrices and vectors.

See reference [here](https://numpy.org/doc/stable/user/absolute_beginners.html#more-information-about-arrays)

+ A `vector` is an array with 1 dimension
+ A `matrix` is an array with 1 dimension
+ A 3-D or higher dimensional arrays, `tensor` is commonly used

In NumPy, dimensions are called **axes**

# DataFrame

## From dict of Series or dict

```{python}
d = {
    "one": pd.Series([1.0, 2.0, 3.0], index = ["a","b","c"]),
    "two": pd.Series([1.0,2.0,3.0,4.0], index=["a","b","c","d"])
}

print(d)
print(type(d))

df = pd.DataFrame(d)
print(df)
```

## From dict of ndarrays/lists

```{python}
d = {"one": [1.0,2.1,3.2,4.3], "two":[4.0,3.1,2.2,1.3]}
print(type(d))
print(pd.DataFrame(d))
```

## From a list of dicts

```{python}
data2 = [{"a": 1, "b": 2}, {"a": 5, "b": 10, "c": 20}]
print(pd.DataFrame(data2))
```

## Column selection, addition, deletion

```{python}
d = {
    "one": pd.Series([1.0, 2.0, 3.0], index = ["a","b","c"]),
    "two": pd.Series([1.0,2.0,3.0,4.0], index=["a","b","c","d"])
}

df = pd.DataFrame(d)
print(df)

# selection
print(df["one"])

# addition
df["three"] = df["one"] * df["two"]
df["flag"] = df["one"] > 2
print(df)

# deletion
df2 = df.pop("three")
print(df2)
```

# Data alignment and arithmetic

```{python}
df = pd.DataFrame(np.random.randn(5,4), columns = ["A","B","C","D"])
df1 = pd.DataFrame(np.random.randn(3,3), columns = ["A","B","C"])

print(df)
print("-"*30)
print(df1)
print("-"*30)
print(df + df1)
```



```{python}
ser1 = pd.Series([1,2,3], index = ["a","b","c"])
ser2 = pd.Series([1,3,5], index = ["b","a","c"])

print(ser1)
print(ser2)

print(np.remainder(ser1, ser2))
```


