[
  {
    "objectID": "posts/py-env/index.html",
    "href": "posts/py-env/index.html",
    "title": "renv.lock equivalent in python",
    "section": "",
    "text": "pip freeze > requirements.txt"
  },
  {
    "objectID": "posts/numpy-intro/index.html",
    "href": "posts/numpy-intro/index.html",
    "title": "NumPy intro",
    "section": "",
    "text": "https://numpy.org/doc/stable/user/quickstart.html\nhttps://numpy.org/doc/stable/user/basics.html\nNumPy’s array class is called ndarray"
  },
  {
    "objectID": "posts/numpy-intro/index.html#import-attributes-of-an-ndarray-object",
    "href": "posts/numpy-intro/index.html#import-attributes-of-an-ndarray-object",
    "title": "NumPy intro",
    "section": "import attributes of an ndarray object:",
    "text": "import attributes of an ndarray object:\n\nndarray.ndim\nndarray.shape\nndarray.size\nndarray.dtype\nndarray.itemsize\nndarray.data"
  },
  {
    "objectID": "posts/numpy-intro/index.html#an-example",
    "href": "posts/numpy-intro/index.html#an-example",
    "title": "NumPy intro",
    "section": "An example",
    "text": "An example\n\nimport numpy as np\n\na = np.arange(15).reshape(3,5)\n\nprint(a)\nprint(a.ndim)\nprint(a.shape)\nprint(a.size)\nprint(a.dtype)\nprint(a.itemsize)\nprint(a.data)\n\n[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]]\n2\n(3, 5)\n15\nint64\n8\n<memory at 0x7f4a7ee631d0>"
  },
  {
    "objectID": "posts/numpy-intro/index.html#array-creation",
    "href": "posts/numpy-intro/index.html#array-creation",
    "title": "NumPy intro",
    "section": "Array Creation",
    "text": "Array Creation\n1-D array\n\n# create an array from a regular python list or tuple\na = np.array([2,3,4])\nb = np.array((5,6,7)) # tuple\nc = np.array((8.1,9.2,10.3))\nprint(a)\nprint(a.dtype)\nprint(a.itemsize)\n\nprint(b)\nprint(b.dtype)\nprint(b.itemsize)\n\nprint(c)\nprint(c.dtype)\nprint(c.itemsize)\n\n[2 3 4]\nint64\n8\n[5 6 7]\nint64\n8\n[ 8.1  9.2 10.3]\nfloat64\n8\n\n\n2-D array\n\na = np.array([[1.1,2.1,3.1],[1.2,2.2,3.2]])\nb = np.array(([1,2,3],[4,5,6]))\n\nprint(a)\nprint(b)\n\n[[1.1 2.1 3.1]\n [1.2 2.2 3.2]]\n[[1 2 3]\n [4 5 6]]"
  },
  {
    "objectID": "posts/numpy-intro/index.html#array-helper-functions",
    "href": "posts/numpy-intro/index.html#array-helper-functions",
    "title": "NumPy intro",
    "section": "array helper functions",
    "text": "array helper functions\n\na = np.zeros([3,4])\nb = np.zeros((2,3))\n\nc = np.ones([3,4])\nd = np.ones((2,3))\n\ne = np.empty([3,4]) # random elements\nf = np.empty((2,3)) # random elements\nprint(a)\nprint(b)\nprint(c)\nprint(d)\nprint(e)\nprint(f)\n\n# np.arange is similar to range\ng = np.arange(10,30,2)\nprint(g)\n\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n[[0. 0. 0.]\n [0. 0. 0.]]\n[[1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]]\n[[1. 1. 1.]\n [1. 1. 1.]]\n[[4.67614480e-310 0.00000000e+000 4.06893302e+233 2.31633990e-152]\n [8.75018070e+183 1.27826274e-152 1.05879817e-153 1.35538914e+224]\n [2.31633993e-152 6.01334670e-154 2.45243596e+198 3.26747693e+178]]\n[[1.1 2.1 3.1]\n [1.2 2.2 3.2]]\n[10 12 14 16 18 20 22 24 26 28]"
  },
  {
    "objectID": "posts/numpy-intro/index.html#basic-operations",
    "href": "posts/numpy-intro/index.html#basic-operations",
    "title": "NumPy intro",
    "section": "Basic Operations",
    "text": "Basic Operations\n\na = np.array([20,30,40,50])\nb = np.arange(4)\nprint(a)\nprint(b)\n\nprint(a-b)\nprint(b**2)\nprint(a < 35)\n\n[20 30 40 50]\n[0 1 2 3]\n[20 29 38 47]\n[0 1 4 9]\n[ True  True False False]\n\n\n\na = np.arange(12).reshape(3,4)\nprint(a)\n\nprint(a.sum(axis = 0)) # sum of each column\nprint(a.sum(axis = 1)) # sum of each row\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n[12 15 18 21]\n[ 6 22 38]"
  },
  {
    "objectID": "posts/pandas-practice-01/index.html",
    "href": "posts/pandas-practice-01/index.html",
    "title": "Pandas basics 01",
    "section": "",
    "text": "Creating a pandas DataFrame\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"Date\": [\"11/05/19\", \"12/05/19\", \"13/05/19\"],\n    \"Time Worked\": [3, 6, 5],\n    \"Money Earned\": [33.5, 42.3, 52.1],\n})\n\n\n\nbasic summaries\n\ndf[\"Time Worked\"].sum()\ndf[\"Money Earned\"].sum()\n\n127.9\n\n\n\n\nA basic plot from pandas\n\ndf.plot(x=\"Date\", y=\"Money Earned\", kind = \"bar\")\n\n<AxesSubplot:xlabel='Date'>"
  },
  {
    "objectID": "posts/data-visualization-101/index.html",
    "href": "posts/data-visualization-101/index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Make it easy for the audience to get the point"
  },
  {
    "objectID": "posts/data-visualization-101/index.html#from-pandas-object",
    "href": "posts/data-visualization-101/index.html#from-pandas-object",
    "title": "Data Visualization",
    "section": "from pandas object",
    "text": "from pandas object\n\nmtcars = pd.read_csv(\"mtcars.csv\")\nmtcars.head()\nmpg = mtcars[\"mpg\"]\n\nmpg.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf = mtcars[[\"cyl\", \"wt\", \"mpg\"]]\n\ndf.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\nbar chart\n\nplt.bar(x, y)\n\n<BarContainer object of 9 artists>\n\n\n\n\n\n\ndf.plot(kind = \"barh\")\n\n<AxesSubplot:>\n\n\n\n\n\n\n\nPie chart\n\nx = [1,2,3,4,0.5]\nplt.pie(x)\nplt.show()\n# plt.savefig(\"pie.png\")"
  },
  {
    "objectID": "posts/pandas-practice-04/index.html",
    "href": "posts/pandas-practice-04/index.html",
    "title": "Python for Data Science Roadmap",
    "section": "",
    "text": "Data Preparation Basics\nData Visualization 101\nPractical Data Visualization\nBasic Math and Statistics\nData Sourcing via Web Scraping\nBuilding Collaborative Analytics with Plotly\n\n\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series(np.arange(5), index = [\"row 1\", \"row 2\", \"row 3\", \"row 4\", \"row 5\"])\n\nprint(s)\n\nrow 1    0\nrow 2    1\nrow 3    2\nrow 4    3\nrow 5    4\ndtype: int64\n\n\n\n\n\nnp.random.seed(25)\nDF_obj = pd.DataFrame(\n    np.random.rand(25).reshape(5,5),\n    index = [\"row 1\", \"row 2\", \"row 3\", \"row 4\", \"row 5\"],\n    columns = [\"column 1\", \"column 2\", \"column 3\", \"column 4\", \"column 5\"]\n)\n\nprint(DF_obj)\n\n# row 2/5 and column 5/2\nprint(DF_obj.loc[[\"row 2\", \"row 5\"], [\"column 5\", \"column 2\"]])\n\n       column 1  column 2  column 3  column 4  column 5\nrow 1  0.870124  0.582277  0.278839  0.185911  0.411100\nrow 2  0.117376  0.684969  0.437611  0.556229  0.367080\nrow 3  0.402366  0.113041  0.447031  0.585445  0.161985\nrow 4  0.520719  0.326051  0.699186  0.366395  0.836375\nrow 5  0.481343  0.516502  0.383048  0.997541  0.514244\n       column 5  column 2\nrow 2  0.367080  0.684969\nrow 5  0.514244  0.516502"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html",
    "href": "posts/pandas-practice-02/index.html",
    "title": "Pandas basics 02",
    "section": "",
    "text": "Practice based on pandas official site"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#using-a-python-dictionary-of-lists",
    "href": "posts/pandas-practice-02/index.html#using-a-python-dictionary-of-lists",
    "title": "Pandas basics 02",
    "section": "using a Python dictionary of lists",
    "text": "using a Python dictionary of lists\n\nthe dictionary keys will be used as “column headers”\nthe values in each list as “columns” of the DataFrame\n\n\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"Name\": [\n            \"Tom\",\n            \"Jim\",\n            \"Rose\"\n        ],\n        \"Age\": [22, 35, 28],\n        \"Sex\": [\"male\", \"male\", \"female\"]\n    }\n)\n\ndf\n\n\n\n\n\n  \n    \n      \n      Name\n      Age\n      Sex\n    \n  \n  \n    \n      0\n      Tom\n      22\n      male\n    \n    \n      1\n      Jim\n      35\n      male\n    \n    \n      2\n      Rose\n      28\n      female"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#each-column-in-a-dataframe-is-a-series",
    "href": "posts/pandas-practice-02/index.html#each-column-in-a-dataframe-is-a-series",
    "title": "Pandas basics 02",
    "section": "each column in a DataFrame is a Series",
    "text": "each column in a DataFrame is a Series\n\n# the selection of a single column is very similar to selection of dictionary\n# values based on the key\n\ntype(df[\"Age\"])\n\n# create a Series from scratch\nages = pd.Series([27,23,25], name =\"Age\")\nages\n\n0    27\n1    23\n2    25\nName: Age, dtype: int64"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#do-something-with-a-dataframe-or-series",
    "href": "posts/pandas-practice-02/index.html#do-something-with-a-dataframe-or-series",
    "title": "Pandas basics 02",
    "section": "Do something with a DataFrame or Series",
    "text": "Do something with a DataFrame or Series\n\nprint(df[\"Age\"].max())\n\nprint(ages.max())\n\n35\n27"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#basic-statistics",
    "href": "posts/pandas-practice-02/index.html#basic-statistics",
    "title": "Pandas basics 02",
    "section": "Basic statistics",
    "text": "Basic statistics\n\ndf.describe() # provides a quick overview of the numerical data in DataFrame\n\n\n\n\n\n  \n    \n      \n      Age\n    \n  \n  \n    \n      count\n      3.000000\n    \n    \n      mean\n      28.333333\n    \n    \n      std\n      6.506407\n    \n    \n      min\n      22.000000\n    \n    \n      25%\n      25.000000\n    \n    \n      50%\n      28.000000\n    \n    \n      75%\n      31.500000\n    \n    \n      max\n      35.000000"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#series",
    "href": "posts/pandas-practice-02/index.html#series",
    "title": "Pandas basics 02",
    "section": "Series",
    "text": "Series\nbasic syntax s = pd.Series(data, index=index)\nHere data can be many different things:\n\na Python dict\nan ndarray\na scalar value (like 5)\n\nThe index is a list of axis labels\nThe axis labels are collectively reffered to as the index\n\nimport numpy as np\n\n# from ndarray\ns = pd.Series(np.random.randn(5), index = [\"a\",\"b\",\"c\",\"d\",\"e\"])\ns\n\n# from dist\nd = {\"x\": 1, \"y\": 2, \"z\": 5}\npd.Series(d)\n\n# if an index is passed, the values in data corresponding to the labels in the\n# index will be pulled out\nd1 = {\"a\": 0.0, \"b\": 2.0, \"c\": 4.0}\npd.Series(d1)\nd2 = {\"a\": 0.0, \"b\": 2.0, \"c\": 4.0}\npd.Series(d2, index = [\"b\", \"d\", \"a\", \"c\"])\n\n# from scalar value\npd.Series(5.8, index = [\"a\", \"b\", \"d\", \"f\"])\n\na    5.8\nb    5.8\nd    5.8\nf    5.8\ndtype: float64\n\n\nwhat is ndarry? which is shorthand for “N-dimensional array”\nThe NumPy ndarray class is used to represent both matrices and vectors.\nSee reference here\n\nA vector is an array with 1 dimension\nA matrix is an array with 1 dimension\nA 3-D or higher dimensional arrays, tensor is commonly used\n\nIn NumPy, dimensions are called axes"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#from-dict-of-series-or-dict",
    "href": "posts/pandas-practice-02/index.html#from-dict-of-series-or-dict",
    "title": "Pandas basics 02",
    "section": "From dict of Series or dict",
    "text": "From dict of Series or dict\n\nd = {\n    \"one\": pd.Series([1.0, 2.0, 3.0], index = [\"a\",\"b\",\"c\"]),\n    \"two\": pd.Series([1.0,2.0,3.0,4.0], index=[\"a\",\"b\",\"c\",\"d\"])\n}\n\nprint(d)\nprint(type(d))\n\ndf = pd.DataFrame(d)\nprint(df)\n\n{'one': a    1.0\nb    2.0\nc    3.0\ndtype: float64, 'two': a    1.0\nb    2.0\nc    3.0\nd    4.0\ndtype: float64}\n<class 'dict'>\n   one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#from-dict-of-ndarrayslists",
    "href": "posts/pandas-practice-02/index.html#from-dict-of-ndarrayslists",
    "title": "Pandas basics 02",
    "section": "From dict of ndarrays/lists",
    "text": "From dict of ndarrays/lists\n\nd = {\"one\": [1.0,2.1,3.2,4.3], \"two\":[4.0,3.1,2.2,1.3]}\nprint(type(d))\nprint(pd.DataFrame(d))\n\n<class 'dict'>\n   one  two\n0  1.0  4.0\n1  2.1  3.1\n2  3.2  2.2\n3  4.3  1.3"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#from-a-list-of-dicts",
    "href": "posts/pandas-practice-02/index.html#from-a-list-of-dicts",
    "title": "Pandas basics 02",
    "section": "From a list of dicts",
    "text": "From a list of dicts\n\ndata2 = [{\"a\": 1, \"b\": 2}, {\"a\": 5, \"b\": 10, \"c\": 20}]\nprint(pd.DataFrame(data2))\n\n   a   b     c\n0  1   2   NaN\n1  5  10  20.0"
  },
  {
    "objectID": "posts/pandas-practice-02/index.html#column-selection-addition-deletion",
    "href": "posts/pandas-practice-02/index.html#column-selection-addition-deletion",
    "title": "Pandas basics 02",
    "section": "Column selection, addition, deletion",
    "text": "Column selection, addition, deletion\n\nd = {\n    \"one\": pd.Series([1.0, 2.0, 3.0], index = [\"a\",\"b\",\"c\"]),\n    \"two\": pd.Series([1.0,2.0,3.0,4.0], index=[\"a\",\"b\",\"c\",\"d\"])\n}\n\ndf = pd.DataFrame(d)\nprint(df)\n\n# selection\nprint(df[\"one\"])\n\n# addition\ndf[\"three\"] = df[\"one\"] * df[\"two\"]\ndf[\"flag\"] = df[\"one\"] > 2\nprint(df)\n\n# deletion\ndf2 = df.pop(\"three\")\nprint(df2)\n\n   one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\na    1.0\nb    2.0\nc    3.0\nd    NaN\nName: one, dtype: float64\n   one  two  three   flag\na  1.0  1.0    1.0  False\nb  2.0  2.0    4.0  False\nc  3.0  3.0    9.0   True\nd  NaN  4.0    NaN  False\na    1.0\nb    4.0\nc    9.0\nd    NaN\nName: three, dtype: float64"
  },
  {
    "objectID": "posts/pandas-practice-03/index.html",
    "href": "posts/pandas-practice-03/index.html",
    "title": "Data Preparation Basics",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nmissing = np.nan\n\nseries_obj = pd.Series([\"row 1\", \"row 2\", missing, \"row 4\", \"row 5\"])\n\nprint(series_obj)\n\nprint(series_obj.isnull())\n\n0    row 1\n1    row 2\n2      NaN\n3    row 4\n4    row 5\ndtype: object\n0    False\n1    False\n2     True\n3    False\n4    False\ndtype: bool"
  },
  {
    "objectID": "posts/pandas-practice-03/index.html#removing-duplicates",
    "href": "posts/pandas-practice-03/index.html#removing-duplicates",
    "title": "Data Preparation Basics",
    "section": "Removing duplicates",
    "text": "Removing duplicates\n\nDF_obj = pd.DataFrame({\n    \"column 1\": [1,1,2,2,3,3],\n    \"column 2\": [\"a\", \"a\", \"b\",\"b\",\"c\",\"c\"],\n    \"column 3\": [\"A\", \"A\",\"B\",\"B\",\"C\",\"C\"]   \n})\n\nprint(DF_obj)\n\nDF_obj.duplicated()\n\n# drop the duplicate\nDF_obj.drop_duplicates()\n\n# or \nDF_obj2 = pd.DataFrame({\n    \"column 1\": [1,1,2,2,3,3],\n    \"column 2\": [\"a\", \"a\", \"b\",\"b\",\"c\",\"c\"],\n    \"column 3\": [\"A\", \"A\",\"B\",\"B\",\"A\",\"A\"]   \n})\nDF_obj2.drop_duplicates([\"column 3\"])\n\n   column 1 column 2 column 3\n0         1        a        A\n1         1        a        A\n2         2        b        B\n3         2        b        B\n4         3        c        C\n5         3        c        C\n\n\n\n\n\n\n  \n    \n      \n      column 1\n      column 2\n      column 3\n    \n  \n  \n    \n      0\n      1\n      a\n      A\n    \n    \n      2\n      2\n      b\n      B"
  },
  {
    "objectID": "posts/pandas-practice-03/index.html#concatenating-and-transforming",
    "href": "posts/pandas-practice-03/index.html#concatenating-and-transforming",
    "title": "Data Preparation Basics",
    "section": "Concatenating and transforming",
    "text": "Concatenating and transforming\n\nDF_obj1 = pd.DataFrame(np.arange(25).reshape(5,5))\nDF_obj1\n\nDF_obj2 = pd.DataFrame(np.arange(15).reshape(5,3))\nDF_obj2\n\nDF_combined = pd.concat([DF_obj1, DF_obj2], axis = 1) # by column\nDF_combined\n\nDF_combined_row = pd.concat([DF_obj1, DF_obj2], axis = 0) # by row\nDF_combined_row\n\n# drop data\nDF_obj1.drop([0,4]) # row with index 0 and 4\nDF_obj1.drop([0,4], axis = 1) # drop column with index 0 and 4\n\n\n\n\n\n  \n    \n      \n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      6\n      7\n      8\n    \n    \n      2\n      11\n      12\n      13\n    \n    \n      3\n      16\n      17\n      18\n    \n    \n      4\n      21\n      22\n      23"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "Creating a pandas DataFrame\n\nimport pandas as pd\n\ndata = {\"Name\": [\"a\", \"b\", \"c\", \"d\"],\n        \"Age\": [24, 23, 22, 19]}\n\ndata\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n  \n    \n      \n      Name\n      Age\n    \n  \n  \n    \n      0\n      a\n      24\n    \n    \n      1\n      b\n      23\n    \n    \n      2\n      c\n      22\n    \n    \n      3\n      d\n      19\n    \n  \n\n\n\n\n\n\nSelecting a Column\n\ndf[\"Name\"]\ndf[[\"Name\"]] # the difference?\n\n\n\n\n\n  \n    \n      \n      Name\n    \n  \n  \n    \n      0\n      a\n    \n    \n      1\n      b\n    \n    \n      2\n      c\n    \n    \n      3\n      d\n    \n  \n\n\n\n\n\n\nSelecting a Row\n\ndf.loc[1]\ndf.iloc[1]\n?df.iloc\n\n\n\nData Selection, addition\n\n# ?df.insert\ndf.insert(1, \"Sex\", \"F\")\ndel df[\"Sex\"]\ndf.insert(2, \"Sex\", \"M\")\ndf\n\n\n\n\n\n  \n    \n      \n      Name\n      Age\n      Sex\n    \n  \n  \n    \n      0\n      a\n      24\n      M\n    \n    \n      1\n      b\n      23\n      M\n    \n    \n      2\n      c\n      22\n      M\n    \n    \n      3\n      d\n      19\n      M\n    \n  \n\n\n\n\n\n\nWorking with missing data\n\nimport numpy as np\ndata = {\"Name\": ['A', np.nan], \"Age\": [23, np.nan]}\n\ndf = pd.DataFrame(data)\ndf\n\ndf.isnull()\ndf.fillna(0)\n\n\n\n\n\n  \n    \n      \n      Name\n      Age\n    \n  \n  \n    \n      0\n      A\n      23.0\n    \n    \n      1\n      0\n      0.0\n    \n  \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nuse exit instead of exit() to exit the RStudio Python REPL"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/data-visualization-102/index.html",
    "href": "posts/data-visualization-102/index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Create a blank figure object\nAdd axes to the figure\nGenerate plot(s) within figure object\nSpecify plotting and layout parameters for the plots within your figure\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n%matplotlib inline\nplt.rcParams[\"figure.figsize\"]=5,4\n\nx = range(1, 10)\ny = [1,2,3,4,0,4,3,2,1]\n\n# fig = plt.figure()\n# ax = fig.add_axes([.1,.1,1,1])\n# ax.plot(x,y)\n\n\nfig = plt.figure()\nax = fig.add_axes([.1,.1,1,1])\n\nax.set_xlim([1,9])\nax.set_ylim([0,5])\n\nax.set_xticks([0,1,2,4,5,6,8,9,10])\nax.set_yticks([0,1,2,3,4,5])\n\nax.plot(x,y)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "daily_python",
    "section": "",
    "text": "visualization\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nvisualization\n\n\n\n\n\n\n\n\n\n\n\nAug 9, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nAug 7, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nAug 6, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnumpy\n\n\n\n\n\n\n\n\n\n\n\nAug 5, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nvirtualenv\n\n\n\n\n\n\n\n\n\n\n\nAug 3, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 2, 2022\n\n\nJie Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\nJie Wang\n\n\n\n\n\n\nNo matching items"
  }
]